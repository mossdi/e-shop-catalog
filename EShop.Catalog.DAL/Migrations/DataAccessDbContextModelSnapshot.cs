// <auto-generated />
using System;
using EShop.Catalog.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EShop.Catalog.DAL.Migrations
{
    [DbContext(typeof(DataAccessDbContext))]
    partial class DataAccessDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EShop.Catalog.DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("84ddb38f-8d9e-4e4b-9022-4085ced63475"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 7, 16, 15, 3, 18, 771, DateTimeKind.Unspecified).AddTicks(7640), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Digital pianos for beginners and professionals.",
                            Name = "Pianos",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 7, 16, 15, 3, 18, 771, DateTimeKind.Unspecified).AddTicks(7690), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("4f71bda6-0fb9-4b45-aada-39e3bfd89548"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 7, 16, 15, 3, 18, 771, DateTimeKind.Unspecified).AddTicks(7700), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Acoustic and electric guitars for beginners and professionals.",
                            Name = "Guitars",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 7, 16, 15, 3, 18, 771, DateTimeKind.Unspecified).AddTicks(7710), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("0aedc2cf-3338-44df-b346-37adc399acae"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 7, 16, 15, 3, 18, 771, DateTimeKind.Unspecified).AddTicks(7710), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Acoustic and electric drums for beginners and professionals.",
                            Name = "Drums",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 7, 16, 15, 3, 18, 771, DateTimeKind.Unspecified).AddTicks(7720), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("b5718b16-3974-4949-a372-b8d93d2352f4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 7, 16, 15, 3, 18, 771, DateTimeKind.Unspecified).AddTicks(7730), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Synthesizers",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 7, 16, 15, 3, 18, 771, DateTimeKind.Unspecified).AddTicks(7730), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("c547c364-5434-428f-803d-0fdd04f7d48e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 7, 16, 15, 3, 18, 771, DateTimeKind.Unspecified).AddTicks(7740), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Accessories",
                            UpdatedAt = new DateTimeOffset(new DateTime(2022, 7, 16, 15, 3, 18, 771, DateTimeKind.Unspecified).AddTicks(7750), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EShop.Catalog.DAL.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("manufacturers", (string)null);
                });

            modelBuilder.Entity("EShop.Catalog.DAL.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("EShop.Catalog.DAL.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_categories", (string)null);
                });

            modelBuilder.Entity("EShop.Catalog.DAL.Entities.Product", b =>
                {
                    b.HasOne("EShop.Catalog.DAL.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("EShop.Catalog.DAL.Entities.ProductCategory", b =>
                {
                    b.HasOne("EShop.Catalog.DAL.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.Catalog.DAL.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
